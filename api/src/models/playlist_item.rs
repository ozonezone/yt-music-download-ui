/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlaylistItem {
    #[serde(rename = "videoId")]
    pub video_id: String,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "artists")]
    pub artists: Vec<crate::models::ArtistRun>,
    #[serde(rename = "album", deserialize_with = "Option::deserialize")]
    pub album: Option<Box<crate::models::Album>>,
    #[serde(rename = "likeStatus")]
    pub like_status: crate::models::LikeStatus,
    #[serde(rename = "thumbnails")]
    pub thumbnails: Vec<crate::models::Thumbnail>,
    #[serde(rename = "isAvailable")]
    pub is_available: bool,
    #[serde(rename = "isExplicit")]
    pub is_explicit: bool,
    #[serde(rename = "videoType")]
    pub video_type: crate::models::VideoType,
    #[serde(rename = "duration", deserialize_with = "Option::deserialize")]
    pub duration: Option<String>,
    #[serde(rename = "duration_seconds", deserialize_with = "Option::deserialize")]
    pub duration_seconds: Option<f64>,
    #[serde(rename = "setVideoId", deserialize_with = "Option::deserialize")]
    pub set_video_id: Option<String>,
    #[serde(rename = "feedbackTokens", deserialize_with = "Option::deserialize")]
    pub feedback_tokens: Option<Box<crate::models::MenuTokens>>,
    #[serde(rename = "feedbackToken", deserialize_with = "Option::deserialize")]
    pub feedback_token: Option<FeedbackToken>,
    #[serde(rename = "rank", deserialize_with = "Option::deserialize")]
    pub rank: Option<String>,
    #[serde(rename = "change", deserialize_with = "Option::deserialize")]
    pub change: Option<crate::models::TrendChange>,
}

impl PlaylistItem {
    pub fn new(video_id: String, title: String, artists: Vec<crate::models::ArtistRun>, album: Option<crate::models::Album>, like_status: crate::models::LikeStatus, thumbnails: Vec<crate::models::Thumbnail>, is_available: bool, is_explicit: bool, video_type: crate::models::VideoType, duration: Option<String>, duration_seconds: Option<f64>, set_video_id: Option<String>, feedback_tokens: Option<crate::models::MenuTokens>, feedback_token: Option<FeedbackToken>, rank: Option<String>, change: Option<crate::models::TrendChange>) -> PlaylistItem {
        PlaylistItem {
            video_id,
            title,
            artists,
            album: if let Some(x) = album {Some(Box::new(x))} else {None},
            like_status,
            thumbnails,
            is_available,
            is_explicit,
            video_type,
            duration,
            duration_seconds,
            set_video_id,
            feedback_tokens: if let Some(x) = feedback_tokens {Some(Box::new(x))} else {None},
            feedback_token,
            rank,
            change,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FeedbackToken {
    #[serde(rename = "null")]
    Null,
}

impl Default for FeedbackToken {
    fn default() -> FeedbackToken {
        Self::Null
    }
}

