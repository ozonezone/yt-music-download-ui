/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ParsedAlbum {
    #[serde(rename = "shuffleId", deserialize_with = "Option::deserialize")]
    pub shuffle_id: Option<String>,
    #[serde(rename = "radioId", deserialize_with = "Option::deserialize")]
    pub radio_id: Option<String>,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "year", deserialize_with = "Option::deserialize")]
    pub year: Option<String>,
    #[serde(rename = "browseId")]
    pub browse_id: String,
    #[serde(rename = "audioPlaylistId")]
    pub audio_playlist_id: String,
    #[serde(rename = "thumbnails")]
    pub thumbnails: Vec<crate::models::Thumbnail>,
    #[serde(rename = "isExplicit")]
    pub is_explicit: bool,
    #[serde(rename = "album_type", deserialize_with = "Option::deserialize")]
    pub album_type: Option<String>,
    #[serde(rename = "artists")]
    pub artists: Vec<crate::models::ArtistRun>,
    #[serde(rename = "libraryLikeStatus", deserialize_with = "Option::deserialize")]
    pub library_like_status: Option<crate::models::LikeStatus>,
}

impl ParsedAlbum {
    pub fn new(shuffle_id: Option<String>, radio_id: Option<String>, r#type: Type, title: String, year: Option<String>, browse_id: String, audio_playlist_id: String, thumbnails: Vec<crate::models::Thumbnail>, is_explicit: bool, album_type: Option<String>, artists: Vec<crate::models::ArtistRun>, library_like_status: Option<crate::models::LikeStatus>) -> ParsedAlbum {
        ParsedAlbum {
            shuffle_id,
            radio_id,
            r#type,
            title,
            year,
            browse_id,
            audio_playlist_id,
            thumbnails,
            is_explicit,
            album_type,
            artists,
            library_like_status,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "album")]
    Album,
}

impl Default for Type {
    fn default() -> Type {
        Self::Album
    }
}

