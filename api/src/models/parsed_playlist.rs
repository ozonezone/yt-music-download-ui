/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ParsedPlaylist {
    #[serde(rename = "shuffleId", deserialize_with = "Option::deserialize")]
    pub shuffle_id: Option<String>,
    #[serde(rename = "radioId", deserialize_with = "Option::deserialize")]
    pub radio_id: Option<String>,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "playlistId")]
    pub playlist_id: String,
    #[serde(rename = "thumbnails")]
    pub thumbnails: Vec<crate::models::Thumbnail>,
    #[serde(rename = "songs", deserialize_with = "Option::deserialize")]
    pub songs: Option<String>,
    #[serde(rename = "authors", deserialize_with = "Option::deserialize")]
    pub authors: Option<Vec<crate::models::ArtistRun>>,
    #[serde(rename = "description", deserialize_with = "Option::deserialize")]
    pub description: Option<String>,
    #[serde(rename = "count", deserialize_with = "Option::deserialize")]
    pub count: Option<String>,
    #[serde(rename = "author", deserialize_with = "Option::deserialize")]
    pub author: Option<Vec<crate::models::ArtistRun>>,
    #[serde(rename = "libraryLikeStatus", deserialize_with = "Option::deserialize")]
    pub library_like_status: Option<crate::models::LikeStatus>,
}

impl ParsedPlaylist {
    pub fn new(shuffle_id: Option<String>, radio_id: Option<String>, r#type: Type, title: String, playlist_id: String, thumbnails: Vec<crate::models::Thumbnail>, songs: Option<String>, authors: Option<Vec<crate::models::ArtistRun>>, description: Option<String>, count: Option<String>, author: Option<Vec<crate::models::ArtistRun>>, library_like_status: Option<crate::models::LikeStatus>) -> ParsedPlaylist {
        ParsedPlaylist {
            shuffle_id,
            radio_id,
            r#type,
            title,
            playlist_id,
            thumbnails,
            songs,
            authors,
            description,
            count,
            author,
            library_like_status,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "playlist")]
    Playlist,
}

impl Default for Type {
    fn default() -> Type {
        Self::Playlist
    }
}

