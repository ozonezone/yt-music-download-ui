/*
 * 
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SongRuns {
    #[serde(rename = "artists")]
    pub artists: Vec<crate::models::ArtistRun>,
    #[serde(rename = "album", deserialize_with = "Option::deserialize")]
    pub album: Option<Box<crate::models::Album>>,
    #[serde(rename = "views", deserialize_with = "Option::deserialize")]
    pub views: Option<String>,
    #[serde(rename = "duration", deserialize_with = "Option::deserialize")]
    pub duration: Option<String>,
    #[serde(rename = "duration_seconds", deserialize_with = "Option::deserialize")]
    pub duration_seconds: Option<f64>,
    #[serde(rename = "year", deserialize_with = "Option::deserialize")]
    pub year: Option<String>,
}

impl SongRuns {
    pub fn new(artists: Vec<crate::models::ArtistRun>, album: Option<crate::models::Album>, views: Option<String>, duration: Option<String>, duration_seconds: Option<f64>, year: Option<String>) -> SongRuns {
        SongRuns {
            artists,
            album: if let Some(x) = album {Some(Box::new(x))} else {None},
            views,
            duration,
            duration_seconds,
            year,
        }
    }
}


